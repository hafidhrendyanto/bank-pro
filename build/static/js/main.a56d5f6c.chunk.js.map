{"version":3,"sources":["images/potrait.png","components/pages/Login.js","components/pages/Home.js","components/pages/Transfer.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","state","accountNumber","onSubmit","e","preventDefault","props","login","setState","history","push","onChange","target","value","this","className","type","name","style","buttonStyle","React","Component","border","background","color","padding","withRouter","Home","currentUser","Fragment","to","src","potrait","potraitStyle","balance","width","display","height","Transfer","destAccNumber","amount","transfer","Header","gotoHome","gotoTransfer","logout","exact","path","render","marginBlockEnd","navStyle","onClick","fontSize","App","listOfUser","related_number","sendSoap","xml","console","log","axios","post","headers","then","res","catch","err","warn","map","user","Number","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a56d5f6c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/potrait.2c13ab9e.png\";","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport '../../App.css';\r\n\r\nclass Login extends React.Component {\r\n    state = {\r\n        accountNumber: '',\r\n        // pin: ''\r\n\r\n        // redirect: false,\r\n    }\r\n    \r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(this.state.accountNumber);\r\n        this.props.login(this.state.accountNumber);\r\n        this.setState({accountNumber: ''});\r\n        this.props.history.push('/');\r\n        // return (<Redirect to='/' />);\r\n        // this.setState({redirect: true});\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({accountNumber: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit} className=\"Login-form\">\r\n                    <div className=\"Input-form\">\r\n                        <p>Nomor Rekening: </p>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"nomor-rekening\"\r\n                            value={this.state.accountNumber}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </div>\r\n                    {/* <div className=\"Input-form\">\r\n                        <p>Pin: </p> \r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"pin\"\r\n                            value={this.state.pin}\r\n                        />\r\n                    </div> */}\r\n                    <div className=\"Input-form\">\r\n                        <input type=\"submit\" name=\"submit\" value=\"Log In\" style={buttonStyle}></input>\r\n                    </div>\r\n                </form>\r\n                {/* {this.state.redirect ? <Redirect to='/' /> : null} */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst buttonStyle = {\r\n    border: 'none',\r\n    background: '#282c34',\r\n    color: '#fff',\r\n    padding: '7px 20px'\r\n}\r\n\r\nexport default withRouter(Login);\r\n// export default Login;","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport potrait from '../../images/potrait.png'\r\nimport '../../App.css';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    if (this.props.currentUser === null) {\r\n        return (\r\n            <React.Fragment>\r\n                <Redirect to='/login' />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"Container\">\r\n            <div className=\"content\">\r\n                <img src={potrait} style={potraitStyle} />\r\n                <div className=\"Profile\">\r\n                    <h1>{this.props.currentUser.name}</h1>\r\n                    <h4>Account Number : {this.props.currentUser.accountNumber}</h4>\r\n                    <h4>Balance : {this.props.currentUser.balance}</h4>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst potraitStyle = {\r\n    width: 'auto',\r\n    display: 'inline',\r\n    height: '40vh' \r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport potrait from '../../images/potrait.png'\r\nimport '../../App.css';\r\n\r\nclass Transfer extends React.Component {\r\n    state = {\r\n        destAccNumber: '',\r\n        amount: 0\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.transfer(this.state.destAccNumber, this.state.amount);\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n    \r\n    render() {\r\n        if (this.props.currentUser === null) {\r\n            return (\r\n                <React.Fragment>\r\n                    <Redirect to='/login' />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"Container\">\r\n                <h1>Transfer Cuan</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"Input-form\">\r\n                        <p>Nomor Rekening Tujuan: </p>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"destAccNumber\"\r\n                            value={this.state.destAccNumber}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"Input-form\">\r\n                        <p>Amount: </p> \r\n                        <input \r\n                            type=\"number\" \r\n                            name=\"amount\"\r\n                            value={this.state.amount}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"Input-form\">\r\n                        <input type=\"submit\" name=\"submit\" value=\"Transfer\" style={buttonStyle}></input>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst buttonStyle = {\r\n    border: 'none',\r\n    background: '#282c34',\r\n    color: '#fff',\r\n    padding: '7px 20px'\r\n}\r\n\r\nexport default Transfer;","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Link, withRouter} from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nclass Header extends React.Component {\r\n    gotoHome = (e) => {\r\n        this.props.history.push('/'); \r\n    }\r\n\r\n    gotoTransfer = (e) => {\r\n        this.props.history.push('/transfer'); \r\n    }\r\n    \r\n    logout = (e) => {\r\n        this.props.logout();\r\n        this.props.history.push('/login'); \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Router>\r\n                <header className=\"App-header\">\r\n                    <Route exact path=\"/login\" render={props => ( \r\n                        <h2>\r\n                            Bank Pro\r\n                        </h2>\r\n                    )} />\r\n                    <Route exact path=\"/\" render={props => (\r\n                        <React.Fragment>\r\n                            <h2 style={{marginBlockEnd: '0.23em'}}>\r\n                                Bank Pro\r\n                            </h2>\r\n                            <nav style= {navStyle} >\r\n                                <Link to='#' className='Link' onClick={this.gotoHome}> Home </Link> | \r\n                                <Link to='#' className='Link' onClick={this.gotoTransfer}> Transfer </Link> | \r\n                                <Link to='#' className='Link' onClick={this.logout}> Logout </Link> \r\n                            </nav>      \r\n                        </React.Fragment>\r\n                    )} />\r\n\r\n                    <Route exact path=\"/transfer\" render={props => (\r\n                        <React.Fragment>\r\n                            <h2 style={{marginBlockEnd: '0.23em'}}>\r\n                                Bank Pro\r\n                            </h2>\r\n                            <nav style= {navStyle} >\r\n                                <Link to='#' className='Link' onClick={this.gotoHome}> Home </Link> | \r\n                                <Link to='#' className='Link' onClick={this.gotoTransfer}> Transfer </Link> | \r\n                                <Link to='#' className='Link' onClick={this.logout}> Logout </Link> \r\n                            </nav>      \r\n                        </React.Fragment>\r\n                    )} />\r\n                </header>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nconst navStyle = {\r\n    fontSize: '0.8em',\r\n    marginBlockEnd: '0.83em'\r\n}\r\n\r\nexport default withRouter(Header);","import React from 'react';\nimport Login from './components/pages/Login';\nimport Home from './components/pages/Home';\nimport Transfer from './components/pages/Transfer';\nimport Header from './components/Header';\nimport axios from 'axios';\n\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    listOfUser: [\n      {\n        accountNumber: '5555',\n        name: 'Hafidh Rendyanto',\n        balance: 8888888888888,\n        history: [\n          {\n            type: 'kredit',\n            amount: 450000,\n            related_number: null\n          }, {\n            type: 'debit',\n            amount: 50000,\n            related_number: null\n          }\n        ]\n      },\n      {\n        accountNumber: '1111',\n        name: 'Kikoy',\n        balance: 8888888888888,\n        history: [\n          {\n            type: 'kredit',\n            amount: 450000,\n            related_number: null\n          }, {\n            type: 'debit',\n            amount: 50000,\n            related_number: null\n          }\n        ]\n\n      },\n      {\n        accountNumber: '2222',\n        name: 'Jebron',\n        balance: 8888888888888,\n        history: []\n      }\n    ],\n    currentUser: null\n  }\n\n  sendSoap = (xml) => {\n  //   let xmlhttp = new XMLHttpRequest();\n  //   xmlhttp.open('POST', 'http://localhost:8080/BankWS/BankWS', true);\n\n  //   xmlhttp.onreadystatechange = function () {\n  //     if (xmlhttp.readyState == 4) {\n  //         if (xmlhttp.status == 200) {\n  //             console.log(xmlhttp.responseText);\n  //             // alert('done. use firebug/console to see network response');\n  //         }\n  //     }\n  // }\n  // // Send the POST request\n  // xmlhttp.setRequestHeader('Content-Type', 'text/xml');\n  // xmlhttp.send(xml);\n\n    console.log(xml);\n    axios.post('http://localhost:8080/BankWS/BankWS', xml, {headers:\n      {'Content-Type': 'text/xml'}\n    }).then(res=>{\n      console.log(res);\n    }).catch(err=>{console.warn(err)});\n  }\n\n  transfer = (accountNumber, amount) => {\n    console.log(amount);\n    this.setState({listOfUser: this.state.listOfUser.map(user => {\n      if (user.accountNumber === this.state.currentUser.accountNumber) {\n        user.balance -= amount;\n      }\n      if (user.accountNumber === accountNumber) {\n        user.balance += Number(amount);\n      }\n    })});\n\n    this.login(this.state.currentUser.accountNumber);\n    console.log(this.state);\n  }\n\n  login = (accountNumber) => {\n    // this.sendSoap(`<?xml version=\"1.0\" encoding=\"UTF-8\"?><S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"><SOAP-ENV:Header/><S:Body><ns2:validateRekening xmlns:ns2=\"http://engima.me.org/\"><rekening>${accountNumber}</rekening></ns2:validateRekening></S:Body></S:Envelope>`);\n    for(let user of this.state.listOfUser) {\n      if (user.accountNumber === accountNumber) {\n        this.setState({currentUser: user});\n        break;\n      }\n    }\n  }\n\n  logout = () => {\n    this.setState({currentUser: null})\n  }\n  \n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" render={props => (\n          <div className=\"App\">\n            <Header logout={this.logout}/>\n            <Home currentUser={this.state.currentUser}/>\n          </div>\n        )} />\n        <Route exact path=\"/login\" render={props => (\n          <div className=\"App\">\n            <Header logout={this.logout}/>\n            <Login login={this.login}/>\n          </div>\n        )} />\n        <Route exact path=\"/transfer\" render={props => (\n          <div className=\"App\">\n            <Header logout={this.logout}/>\n            <Transfer transfer={this.transfer} />\n          </div>\n        )} />             \n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}